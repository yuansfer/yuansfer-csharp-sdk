<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="https://js.braintreegateway.com/web/dropin/1.25.0/js/dropin.min.js"></script>
    <!--出paypal按钮要加-->
    <script src="https://js.braintreegateway.com/web/3.64.2/js/client.min.js"></script>
    <script src="https://js.braintreegateway.com/web/3.64.2/js/paypal-checkout.min.js"></script>
    <!--venmo client-->
    <script src="https://js.braintreegateway.com/web/3.71.0/js/client.min.js"></script>
    <script src="https://js.braintreegateway.com/web/3.71.0/js/venmo.min.js"></script>
    <script src="https://js.braintreegateway.com/web/3.71.0/js/data-collector.min.js"></script>
    <!--    applepay client-->
    <script src="https://js.braintreegateway.com/web/3.71.0/js/apple-pay.min.js"></script>
    <title>Payment</title>
    <style>
        body{background-color: #efecec;}
        button{
            width: 97px;
            height: 40px;
            padding: 10px;
            font-size: 16px;
            color: #fff;
            background-color: #47A2FF;
            border: none;
            border-radius: 5px;
            margin: auto;
        }
        .loading {
            margin: 20% auto;
            text-align: center;
            border: 16px solid #f3f3f3;
            border-radius: 50%;
            border-top: 16px solid #3498db;
            width: 120px;
            height: 120px;
            -webkit-animation: spin 2s linear infinite;
            animation: spin 2s linear infinite;
            z-index: 1000;
            display: none;
        }
        @@-webkit-keyframes spin {
            0% {
                -webkit-transform: rotate(0deg);
            }
            100% {
                -webkit-transform: rotate(360deg);
            }
        }
        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
        .main{margin: 50px auto;width: 90%;max-width: 800px;background-color: #fff;padding: 10px 20px;min-height: 500px;border-radius: 10px;}
        .btn{width:100%;text-align: center;}
        #submit-button{display: none;}
        #applepay{display: none;}
        #venmo-button{display: none;}
        .apple-pay-button {
            display: inline-block;
            /*-webkit-appearance: -apple-pay-button;*/
            -apple-pay-button-type: donate; /* Use any supported button type. */
        }
        .apple-pay-button-black {
            -apple-pay-button-style: black;
        }
        .apple-pay-button-white {
            -apple-pay-button-style: white;
        }
        .apple-pay-button-white-with-line {
            -apple-pay-button-style: white-outline;
        }
    </style>
</head>
<body>

    <input type="hidden" name="_token" id="_token" value='@ViewBag.res.authorization' />
    <input type="hidden" name="_submitUrl" id="_submitUrl" value="http://localhost:17764/api/homeapi/process" />
    <input type="hidden" name="_amt" id="_amt" value='@ViewBag.request.amount' />
    <input type="hidden" name="_cur" id="_cur" value='@ViewBag.request.currency' />
    <input type="hidden" name="_intent" id="_intent" value='@ViewBag.res.intent' />
    <input type="hidden" name="_outerCallId" id="_outerCallId" value='@ViewBag.res.outerCallId' />
    <input type="hidden" name="_transactionNo" id="_transactionNo" value='@ViewBag.res.transactionNo' />
    <input type="hidden" name="_vendor" id="_vendor" value='@ViewBag.request.vendor' />


    <div class="loading" id="loading"></div>
    <div class="main" id="main">
        <div class="info">
            <p>Transaction No: @ViewBag.res.transactionNo</p>
            <p>Amount: @ViewBag.request.amount</p>
            <p>Currency: @ViewBag.request.currency</p>
        </div>
        <div id="dropin-container"></div>
        <div class="btn" id="btn">
            <button id="submit-button">Pay</button>
        </div>
        <div class="apple-pay-button apple-pay-button-black"
             lang="en" data-bind="click: intializeApplePaySession"
             id="applepay">
            Apple Pay
        </div>
        <div class="btn" id="venmo_btn">
            <button id="venmo-button">Venmo</button>
        </div>
    </div>

    <script>
        // 数据
        const paymentMethods = {
            'CreditCard': 'credit_card',
            'PayPalAccount': 'paypal_account',
            'VenmoAccount': 'venmo_account',
            'ApplePayCard': 'apple_pay_card',
            'AndroidPayCard': 'android_pay_card', //google pay
        }
        const token = document.getElementById('_token').value;
        const amount = document.getElementById('_amt').value;
        const intent = document.getElementById('_intent').value;
        const currency = document.getElementById('_cur').value;
        const outerCallId = document.getElementById('_outerCallId').value;
        const transactionNo = document.getElementById('_transactionNo').value;
        const url = document.getElementById("_submitUrl").value;
        const vendor = document.getElementById("_vendor").value;
        let deviceData = '';
        let curPaymentMethod = '';
        var venmoButton = document.getElementById('venmo-button');

        //方法

        function ajaxObject() {
            let xmlHttp;
            try {
                // Firefox, Opera 8.0+, Safari
                xmlHttp = new XMLHttpRequest();
            }
            catch (e) {
                // Internet Explorer
                try {
                    xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
                } catch (e) {
                    try {
                        xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
                    } catch (e) {
                        alert("您的浏览器不支持AJAX！");
                        return false;
                    }
                }
            }
            return xmlHttp;
        }

        function ajaxPost(url, data, fnSucceed) {
            const ajax = ajaxObject();
            ajax.open("post", url, true);
            ajax.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            ajax.onreadystatechange = function () {
                if (ajax.readyState == 4 && ajax.status == 200) {
                    fnSucceed(ajax.responseText);
                }
            }
            ajax.send(data);
        }

        function getDropinVendor() {
            // 根据vendor 配置dropin的braintree 的支付渠道
            let curVendor = null;
            switch (vendor) {
                case 'paypal':
                    curVendor = {
                        card: false, // 不显示信用卡
                        paypal: {
                            flow: 'checkout',
                            amount: amount,
                            currency: currency
                        },
                        // paypalCredit: {
                        //     flow: 'checkout',
                        //     amount: amount,
                        //     currency: currency
                        // },
                    };
                    break
                case 'venmo':
                    curVendor = {
                        card: false, // 不显示信用卡
                        venmo: { // 使用默认配置项
                            // allowNewBrowserTab: true
                            // allowDesktop: true
                        }
                    };
                    break
                case 'googlepay':
                    curVendor = {
                        card: false, // 不显示信用卡
                        googlePay: {
                            googlePayVersion: 2,
                            merchantId: 'merchant-id-from-google',
                            transactionInfo: {
                                totalPriceStatus: 'FINAL',
                                totalPrice: amount,
                                currencyCode: currency
                            },
                            allowedPaymentMethods: [{
                                type: 'CARD',
                                parameters: {
                                    // We recommend collecting and passing billing address information with all Google Pay
                                    // transactions as a best practice.
                                    billingAddressRequired: true,
                                    billingAddressParameters: {
                                        format: 'FULL'
                                    }
                                }
                            }]
                        },
                    };
                    break
                case 'applepay':
                    curVendor = {
                        card: false, // 不显示信用卡
                        applePay: {
                            displayName: 'Merchant Name',
                            paymentRequest: { // https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest
                                total: {
                                    label: 'my store',
                                    amount: amount
                                }
                            }
                        },
                    };
                    break
                case 'creditcard':
                    // curVendor = {
                    //     card: true, // 显示信用卡
                    // };
                    break
                default:
                    console.log('vendor is: ', vendor);
            }
            return curVendor
        }

        function handleIdElementStyle(id, attr, val) {
            const el = document.getElementById(id);
            if (el) {
                el.style[attr] = val;
            }
        }

        function initDropin() {
            // 配置dropin 的内置支付方式credit/paypal/googlepay，默认是有creditcard的,
            const curVendor = getDropinVendor();
            const options = {
                authorization: token,
                container: '#dropin-container',
                ...curVendor
            };
            const button = document.querySelector('#submit-button');
            braintree.dropin.create(options, function (createErr, instance) {
                if (createErr) {
                    // An error in the create call is likely due to
                    // incorrect configuration values or network issues.
                    // An appropriate error will be shown in the UI.
                    console.error('createErr ', createErr);
                    return;
                }
                //初始化dropin成功显示按钮
                handleIdElementStyle('submit-button', 'display', 'block');
                button.addEventListener('click', function () {
                    instance.requestPaymentMethod(function (requestPaymentMethodErr, payload) {
                        if (requestPaymentMethodErr) {
                            // No payment method is available.
                            // An appropriate error will be shown in the UI.
                            console.error('requestPaymentMethodErr ', requestPaymentMethodErr);
                            return;
                        }
                        //显示loading
                        handleIdElementStyle('loading', 'display', 'block');
                        handleIdElementStyle('main', 'display', 'none');
                        // 通过payload来给curPaymentMethod赋值
                        curPaymentMethod = paymentMethods[payload.type];
                        // Submit payload.nonce to your server
                        const params = "paymentMethodNonce=" + payload.nonce + "&transactionNo=" + transactionNo + "&outerCallId=" +
                            outerCallId + "&paymentMethod=" + curPaymentMethod;
                        ajaxPost(url, params, function (data) {
                            const result = JSON.parse(data)
                            if ("SUCCESS" === result.ret_code) {
                                //隐藏loading
                                handleIdElementStyle('loading', 'display', 'none');
                                // handleIdElementStyle('main','display','block');
                                result.callbackUrl ? window.location.href = result.callbackUrl : '';
                            } else {
                                //隐藏loading
                                handleIdElementStyle('loading', 'display', 'none');
                                handleIdElementStyle('main', 'display', 'block');
                                location.reload();
                            }
                        })
                    });
                });
            });
        }
        function initClientVenmo() {
            // Create a client.
            // const venmoButton = document.getElementById('submit-button');
            braintree.client.create({
                authorization: token
            }, function (clientErr, clientInstance) {
                // Stop if there was a problem creating the client.
                // This could happen if there is a network error or if the authorization
                // is invalid.
                if (clientErr) {
                    console.error('Error creating client:', clientErr);
                    return;
                }
                //must collect information about the customer's device before creating each transaction
                //need to pass this deviceData when creating the Venmo transaction from your server
                braintree.dataCollector.create({
                    client: clientInstance,
                    paypal: true,
                }, function (dataCollectorErr, dataCollectorInstance) {
                    if (dataCollectorErr) {
                        // Handle error in creation of data collector.
                        console.error('dataCollectorErr: ', dataCollectorErr);
                        return;
                    }
                    // At this point, you should access the deviceData value and provide it
                    // to your server, e.g. by injecting it into your form as a hidden input.
                    deviceData = dataCollectorInstance.deviceData;
                });

                braintree.venmo.create({ // https://braintree.github.io/braintree-web/current/Venmo.html
                    client: clientInstance,
                    allowDesktop: true,
                    // Add allowNewBrowserTab: false if your checkout page does not support
                    // relaunching in a new tab when returning from the Venmo app. This can
                    // be omitted otherwise.
                    // allowNewBrowserTab: false
                }, function (venmoErr, venmoInstance) {
                    if (venmoErr) {
                        console.error('Error creating Venmo:', venmoErr);
                        return;
                    }
                    // Verify browser support before proceeding.
                    if (!venmoInstance.isBrowserSupported()) {
                        console.log('Browser does not support Venmo');
                        return;
                    }

                    displayVenmoButton(venmoInstance);

                    // Check if tokenization results already exist. This occurs when your
                    // checkout page is relaunched in a new tab. This step can be omitted
                    // if allowNewBrowserTab is false.
                    if (venmoInstance.hasTokenizationResult()) {
                        venmoInstance.tokenize(function (tokenizeErr, payload) {
                            if (tokenizeErr) {
                                handleVenmoError(tokenizeErr);
                            } else {
                                handleVenmoSuccess(payload);
                            }
                        });
                        return;
                    }
                });
            });

            function displayVenmoButton(venmoInstance) {
                // Assumes that venmoButton is initially display: none.
                venmoButton.style.display = 'block';

                venmoButton.addEventListener('click', function () {
                    venmoButton.disabled = true;

                    venmoInstance.tokenize(function (tokenizeErr, payload) {
                        venmoButton.removeAttribute('disabled');
                        if (tokenizeErr) {
                            handleVenmoError(tokenizeErr);
                        } else {
                            handleVenmoSuccess(payload);
                        }
                    });
                });
            }

            function handleVenmoError(err) {
                //隐藏loading
                handleIdElementStyle('loading', 'display', 'none');
                if (err.code === 'VENMO_CANCELED') {
                    console.log('App is not available or user aborted payment flow');
                } else if (err.code === 'VENMO_APP_CANCELED') {
                    console.log('User canceled payment flow');
                } else {
                    console.error('An error occurred:', err.message);
                }
            }

            function handleVenmoSuccess(payload) {
                // Send the payment method nonce to your server, e.g. by injecting
                // it into your form as a hidden input.
                // Display the Venmo username in your checkout UI.
                // 通过payload来给curPaymentMethod赋值
                curPaymentMethod = paymentMethods[payload.type];
                // Submit payload.nonce to your server
                const params = "paymentMethodNonce=" + payload.nonce + "&transactionNo=" + transactionNo + "&outerCallId=" +
                    outerCallId + "&paymentMethod=" + curPaymentMethod + "&deviceData=" + deviceData;
                ajaxPost(url, params, function (data) {
                    const result = JSON.parse(data)
                    if ("SUCCESS" === result.ret_code) {
                        //隐藏loading
                        handleIdElementStyle('loading', 'display', 'none');
                        // handleIdElementStyle('main','display','block');
                        result.callbackUrl ? window.location.href = result.callbackUrl : '';
                    } else {
                        // document.getElementById('prompt').style.display='none';
                        // parent.document.getElementById('showOtherswaringText').innerHTML=result.ret_msg;
                        // parent.document.getElementById('showOtherswaring').style.display='block';
                        //隐藏loading
                        handleIdElementStyle('loading', 'display', 'none');
                        // handleIdElementStyle('main','display','block');
                        location.reload();
                    }
                })
            }

        }

        function start() {
            //creditcard,googlepay,paypal,applepay使用dropin
            switch (vendor) {
                case 'creditcard':
                case 'paypal':
                case 'googlepay':
                case 'applepay':
                    initDropin();
                    break
                case 'venmo':
                    initClientVenmo();
                    // initDropin();
                    break
                default:
                    console.log(`current vendor is ${vendor}, start nothing...`)

            }
        }
        //=====================start project=======================
        start();

    </script>

</body>
</html>
